// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/analytics.proto

package analytics

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Analytics service

func NewAnalyticsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Analytics service

type AnalyticsService interface {
	Track(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*Empty, error)
	Get(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*AnalyticsResponse, error)
	Delete(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*AnalyticsResponse, error)
	List(ctx context.Context, in *Empty, opts ...client.CallOption) (*Counters, error)
}

type analyticsService struct {
	c    client.Client
	name string
}

func NewAnalyticsService(name string, c client.Client) AnalyticsService {
	return &analyticsService{
		c:    c,
		name: name,
	}
}

func (c *analyticsService) Track(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Analytics.Track", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsService) Get(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*AnalyticsResponse, error) {
	req := c.c.NewRequest(c.name, "Analytics.Get", in)
	out := new(AnalyticsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsService) Delete(ctx context.Context, in *AnalyticsRequest, opts ...client.CallOption) (*AnalyticsResponse, error) {
	req := c.c.NewRequest(c.name, "Analytics.Delete", in)
	out := new(AnalyticsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsService) List(ctx context.Context, in *Empty, opts ...client.CallOption) (*Counters, error) {
	req := c.c.NewRequest(c.name, "Analytics.List", in)
	out := new(Counters)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Analytics service

type AnalyticsHandler interface {
	Track(context.Context, *AnalyticsRequest, *Empty) error
	Get(context.Context, *AnalyticsRequest, *AnalyticsResponse) error
	Delete(context.Context, *AnalyticsRequest, *AnalyticsResponse) error
	List(context.Context, *Empty, *Counters) error
}

func RegisterAnalyticsHandler(s server.Server, hdlr AnalyticsHandler, opts ...server.HandlerOption) error {
	type analytics interface {
		Track(ctx context.Context, in *AnalyticsRequest, out *Empty) error
		Get(ctx context.Context, in *AnalyticsRequest, out *AnalyticsResponse) error
		Delete(ctx context.Context, in *AnalyticsRequest, out *AnalyticsResponse) error
		List(ctx context.Context, in *Empty, out *Counters) error
	}
	type Analytics struct {
		analytics
	}
	h := &analyticsHandler{hdlr}
	return s.Handle(s.NewHandler(&Analytics{h}, opts...))
}

type analyticsHandler struct {
	AnalyticsHandler
}

func (h *analyticsHandler) Track(ctx context.Context, in *AnalyticsRequest, out *Empty) error {
	return h.AnalyticsHandler.Track(ctx, in, out)
}

func (h *analyticsHandler) Get(ctx context.Context, in *AnalyticsRequest, out *AnalyticsResponse) error {
	return h.AnalyticsHandler.Get(ctx, in, out)
}

func (h *analyticsHandler) Delete(ctx context.Context, in *AnalyticsRequest, out *AnalyticsResponse) error {
	return h.AnalyticsHandler.Delete(ctx, in, out)
}

func (h *analyticsHandler) List(ctx context.Context, in *Empty, out *Counters) error {
	return h.AnalyticsHandler.List(ctx, in, out)
}
